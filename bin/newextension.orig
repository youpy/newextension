#!/usr/bin/env ruby
#
#  Created on 2007-9-27.
#  Copyright (c) 2007. All rights reserved.

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'
require 'pathname'
require 'fileutils'
require 'uuidtools'
require 'erb'

include FileUtils

def camelize(lower_case_and_underscored_word)
  lower_case_and_underscored_word.to_s.gsub(/\/(.?)/) { "::" + $1.upcase }.gsub(/(^|_)(.)/) { $2.upcase }
end

OPTIONS = {
  :author => 'somebody',
  :version => '0.1',
}
MANDATORY_OPTIONS = %w(  )

extension_dir = nil

parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
#{File.basename($0)}: create a Firefox extension skeleton

Usage: #{File.basename($0)} [options] extension_dir

Options are:
BANNER
  opts.separator ""
  opts.on("-a", "--author=AUTHOR", String,
          "The author of new extension",
          "Default: #{OPTIONS[:author]}") { |OPTIONS[:author]| }
  opts.on("-V", "--version=VERSION", String,
          "The version of new extension",
          "Default: #{OPTIONS[:version]}") { |OPTIONS[:version]| }
  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }
  opts.parse!(ARGV)

  extension_dir = Pathname.new(ARGV.shift).expand_path

  if MANDATORY_OPTIONS && MANDATORY_OPTIONS.find { |option| OPTIONS[option.to_sym].nil? }
    puts opts; exit
  end
end

author = OPTIONS[:author]
version = OPTIONS[:version]
uuid = UUID.random_create.to_s

templates = Pathname.new(File.dirname(__FILE__)).realpath + '../templates'
extension_name = extension_dir.basename.to_s
package_name = extension_name.downcase.gsub(/[^a-z]/, '')

cd templates do
  Pathname.glob('**/*').each do |filename|
    target = Pathname.new([extension_dir, filename].join('/')).expand_path

    if File.directory?(filename)
      mkdir_p target
      puts "create directory:\n\t#{target}"
    else
      open(target.to_s.gsub(/__extension__/, camelize(extension_name)), 'w') do |dst|
        dst.write(ERB.new(filename.read, $SAFE, '-').result(binding))
        puts "create: #{dst.path}"
      end
    end
  end
end
